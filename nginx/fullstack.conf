# Nginx reverse proxy + static for single container
server {
    listen 80;
    server_name _;

    # Static Next.js export (already hashed assets)
    root /usr/share/nginx/html;
    index index.html;

    # Gzip
    gzip on;
    gzip_types text/plain application/javascript text/css application/json image/svg+xml;

    # Long cache for hashed assets
    location ~* /_next/static/ { expires 365d; add_header Cache-Control "public, immutable"; }
    location ~* \.(js|css|png|jpg|jpeg|gif|svg|webp)$ { expires 30d; add_header Cache-Control "public"; }

    # API proxy -> FastAPI (uvicorn) running on localhost:8001
    # Important: don't append /api/ again to avoid double prefix causing 404s
    location /api/ {
        # Strip only the leading /api/ when forwarding? Not needed because backend defines routes with /api/ prefix already.
        # We forward exact path so /api/... hits backend /api/... unchanged.
        proxy_pass http://127.0.0.1:8001/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Health simple passthrough (explicit file) -> backend /health (no /api prefix internally)
    location = /api/health {
        proxy_pass http://127.0.0.1:8001/health;
        access_log off;
    }

    # Health usado por Dockerfile (curl http://localhost/health)
    # Sin esto devolver√≠a index.html (SPA) y false positives si el backend cae.
    location = /health {
        proxy_pass http://127.0.0.1:8001/health;
        access_log off;
    }

    # Temporary explicit test location to ensure Google OAuth login reachable (can remove after verification)
    location = /api/auth/google/login {
        proxy_pass http://127.0.0.1:8001/api/auth/google/login;
    }

    # Fallback SPA (serve index.html)
    location / {
        try_files $uri $uri/ /index.html;
    }
}
