"""
Agent base mejorado para el sistema educativo
"""

from typing import Dict, Any, Optional, List
import json
import re
from datetime import datetime
import asyncio

class EnhancedEducationalAgent:
    """Agdente educativo mejorado con capacidades avanzadas"""
    
    def __init__(self, agent_type: str = "enhanced", agent_name: str = "Enhanced Agent", config: Optional[Dict] = None):
        self.agent_type = agent_type
        self.agent_name = agent_name
        self.config = config or {}
        self.conversation_history = []
        self.capabilities = [
            "respuestas_educativas",
            "analisis_texto",
            "generacion_contenido",
            "soporte_multiidioma",
            "tracking_progreso"
        ]
    
    async def process_message(self, message: str, context: Optional[Dict] = None) -> str:
        """Procesar mensaje del usuario y generar respuesta educativa"""
        try:
            # Limpiar y preparar el mensaje
            cleaned_message = self._clean_message(message)
            
            # Agregar a historial
            self.conversation_history.append({
                "timestamp": datetime.now().isoformat(),
                "message": cleaned_message,
                "context": context or {}
            })
            
            # Generar respuesta basada en el tipo de consulta
            response = await self._generate_educational_response(cleaned_message, context)
            
            return response
            
        except Exception as e:
            return f"‚ö†Ô∏è Error procesando mensaje: {str(e)}"
    
    def _clean_message(self, message: str) -> str:
        """Limpiar y formatear mensaje de entrada"""
        if not message:
            return ""
        
        # Eliminar caracteres especiales y normalizar espacios
        cleaned = re.sub(r'\s+', ' ', message.strip())
        return cleaned
    
    async def _generate_educational_response(self, message: str, context: Optional[Dict] = None) -> str:
        """Generar respuesta educativa apropiada"""
        
        # Determinar tipo de consulta
        query_type = self._classify_query(message)
        
        if query_type == "pregunta_academica":
            return await self._handle_academic_question(message, context)
        elif query_type == "solicitud_explicacion":
            return await self._handle_explanation_request(message, context)
        elif query_type == "evaluacion":
            return await self._handle_evaluation_request(message, context)
        elif query_type == "planificacion":
            return await self._handle_planning_request(message, context)
        else:
            return await self._handle_general_query(message, context)
    
    def _classify_query(self, message: str) -> str:
        """Clasificar tipo de consulta educativa"""
        message_lower = message.lower()
        
        # Palabras clave para diferentes tipos de consultas
        academic_keywords = ["qu√© es", "define", "explica", "concepto", "teor√≠a", "f√≥rmula"]
        explanation_keywords = ["c√≥mo", "por qu√©", "pasos", "proceso", "m√©todo"]
        evaluation_keywords = ["examen", "prueba", "evaluaci√≥n", "ejercicio", "problema"]
        planning_keywords = ["plan", "cronograma", "organizar", "estudiar", "preparar"]
        
        if any(keyword in message_lower for keyword in academic_keywords):
            return "pregunta_academica"
        elif any(keyword in message_lower for keyword in explanation_keywords):
            return "solicitud_explicacion"
        elif any(keyword in message_lower for keyword in evaluation_keywords):
            return "evaluacion"
        elif any(keyword in message_lower for keyword in planning_keywords):
            return "planificacion"
        else:
            return "consulta_general"
    
    async def _handle_academic_question(self, message: str, context: Optional[Dict] = None) -> str:
        """Manejar preguntas acad√©micas"""
        return f"""üìö **Respuesta Acad√©mica**

**Consulta:** {message}

üìñ Esta es una pregunta acad√©mica importante. Te ayudo a comprenderla:

üîç **An√°lisis del tema:**
- Concepto fundamental en el √°rea de estudio
- Requiere comprensi√≥n te√≥rica y pr√°ctica
- Importante para el desarrollo del conocimiento

üí° **Puntos clave a considerar:**
- Definiciones precisas
- Ejemplos pr√°cticos
- Aplicaciones reales
- Conexiones con otros conceptos

üìù **Recomendaci√≥n:** 
Para una comprensi√≥n completa, te sugiero revisar material adicional y practicar con ejercicios relacionados.

¬øTe gustar√≠a que profundice en alg√∫n aspecto espec√≠fico?"""
    
    async def _handle_explanation_request(self, message: str, context: Optional[Dict] = None) -> str:
        """Manejar solicitudes de explicaci√≥n"""
        return f"""üéØ **Explicaci√≥n Detallada**

**Tu consulta:** {message}

üìã **Pasos para entender el proceso:**

1Ô∏è‚É£ **Primer paso:** Identificar los elementos clave
2Ô∏è‚É£ **Segundo paso:** Analizar las relaciones
3Ô∏è‚É£ **Tercer paso:** Aplicar el conocimiento
4Ô∏è‚É£ **Cuarto paso:** Verificar la comprensi√≥n

üî¨ **Metodolog√≠a recomendada:**
- Partir de lo conocido hacia lo desconocido
- Usar ejemplos concretos
- Practicar con casos similares
- Buscar patrones y conexiones

‚úÖ **Para verificar tu comprensi√≥n:**
- Explica el proceso con tus propias palabras
- Aplica en un ejemplo diferente
- Identifica posibles variaciones

¬øHay alg√∫n paso espec√≠fico que necesitas que clarifique m√°s?"""
    
    async def _handle_evaluation_request(self, message: str, context: Optional[Dict] = None) -> str:
        """Manejar solicitudes de evaluaci√≥n"""
        return f"""üìä **Soporte para Evaluaci√≥n**

**√Årea de evaluaci√≥n:** {message}

üéØ **Estrategia de preparaci√≥n:**

üìö **Revisi√≥n de contenidos:**
- Conceptos fundamentales
- F√≥rmulas y definiciones clave
- Ejemplos y casos pr√°cticos

üß† **T√©cnicas de estudio:**
- Res√∫menes estructurados
- Mapas conceptuales
- Pr√°ctica con ejercicios
- Autoevaluaci√≥n continua

‚è∞ **Planificaci√≥n temporal:**
- Distribuci√≥n de temas por sesiones
- Tiempo para repaso
- Pr√°ctica de ex√°menes anteriores

üí™ **Consejos para el d√≠a del examen:**
- Lectura cuidadosa de instrucciones
- Gesti√≥n efectiva del tiempo
- Revisi√≥n final de respuestas

¬øTe gustar√≠a que te ayude a crear un plan de estudio espec√≠fico?"""
    
    async def _handle_planning_request(self, message: str, context: Optional[Dict] = None) -> str:
        """Manejar solicitudes de planificaci√≥n"""
        return f"""üìÖ **Plan de Estudio Personalizado**

**Objetivo:** {message}

üóìÔ∏è **Estructura de planificaci√≥n:**

**Fase 1: Diagn√≥stico (Semana 1)**
- Evaluaci√≥n de conocimientos previos
- Identificaci√≥n de fortalezas y √°reas de mejora
- Definici√≥n de objetivos espec√≠ficos

**Fase 2: Desarrollo (Semanas 2-4)**
- Estudio sistem√°tico de contenidos
- Pr√°ctica regular con ejercicios
- Seguimiento de progreso

**Fase 3: Consolidaci√≥n (Semana 5)**
- Repaso integral
- Resoluci√≥n de dudas
- Preparaci√≥n final

üìà **M√©tricas de seguimiento:**
- Tiempo dedicado por tema
- Nivel de comprensi√≥n alcanzado
- Resultados en autoevaluaciones

üéØ **Ajustes personalizados:**
- Adaptaci√≥n seg√∫n tu ritmo de aprendizaje
- Enfoque en √°reas que requieren m√°s atenci√≥n
- Flexibilidad para cambios necesarios

¬øTe gustar√≠a que detalle alguna fase espec√≠fica del plan?"""
    
    async def _handle_general_query(self, message: str, context: Optional[Dict] = None) -> str:
        """Manejar consultas generales"""
        return f"""üí¨ **Respuesta Educativa General**

**Tu consulta:** {message}

üëã Como tu asistente educativo, estoy aqu√≠ para ayudarte con:

üìö **Apoyo acad√©mico:**
- Explicaciones de conceptos
- Resoluci√≥n de dudas
- Gu√≠a en metodolog√≠as de estudio

üéØ **Planificaci√≥n educativa:**
- Organizaci√≥n de horarios de estudio
- Estrategias de aprendizaje
- Preparaci√≥n para evaluaciones

üí° **Recursos adicionales:**
- Sugerencias de material de estudio
- T√©cnicas de memorizaci√≥n
- M√©todos de autoevaluaci√≥n

ü§ù **Personalizaci√≥n:**
- Adaptaci√≥n a tu estilo de aprendizaje
- Seguimiento de tu progreso
- Ajustes seg√∫n tus necesidades

¬øHay algo espec√≠fico en lo que pueda ayudarte mejor? ¬°Estoy aqu√≠ para apoyar tu proceso de aprendizaje!"""
    
    def get_conversation_history(self) -> List[Dict]:
        """Obtener historial de conversaci√≥n"""
        return self.conversation_history
    
    def clear_history(self):
        """Limpiar historial de conversaci√≥n"""
        self.conversation_history = []
    
    def get_capabilities(self) -> List[str]:
        """Obtener lista de capacidades del agente"""
        return self.capabilities
    
    def get_agent_info(self) -> Dict[str, Any]:
        """Obtener informaci√≥n del agente"""
        return {
            "type": self.agent_type,
            "name": self.agent_name,
            "capabilities": self.capabilities,
            "conversation_length": len(self.conversation_history),
            "config": self.config,
            "status": "active"
        }
