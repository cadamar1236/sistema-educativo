# Dockerfile corregido para el frontend con todos los fixes
FROM node:18-alpine AS frontend-builder

WORKDIR /app

# Copiar archivos de configuraci칩n
COPY julia-frontend/package*.json ./
COPY julia-frontend/next.config.js ./
COPY julia-frontend/tailwind.config.ts ./
COPY julia-frontend/tsconfig.json ./
COPY julia-frontend/postcss.config.js ./

# Instalar dependencias
RUN npm ci --only=production

# Copiar c칩digo fuente
COPY julia-frontend/ ./

# Build del frontend
RUN npm run build

# Stage final - Backend con frontend est치tico
FROM python:3.11-slim

# Instalar dependencias del sistema
RUN apt-get update && apt-get install -y \
    curl \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Crear usuario
RUN useradd --create-home --shell /bin/bash app

WORKDIR /app

# Instalar dependencias Python
COPY requirements*.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# Crear directorios
RUN mkdir -p /app/data/uploads /app/data/temp /app/logs /app/static

# Copiar c칩digo backend
COPY . .

# Copiar build del frontend
COPY --from=frontend-builder /app/out ./static/
COPY --from=frontend-builder /app/.next/static ./static/_next/static/

# Cambiar permisos
RUN chown -R app:app /app

USER app

# Variables de entorno
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV ENVIRONMENT=production
ENV HOST=0.0.0.0
ENV PORT=8000

EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Comando de inicio
CMD ["python", "-m", "uvicorn", "src.main_simple:app", "--host", "0.0.0.0", "--port", "8000"]
